import tkinter as tk
from tkinter import messagebox, Label, Button, Entry
from PIL import Image, ImageTk
import cv2
import csv
import os
import numpy as np
import pandas as pd
import datetime
import time
import pymysql.connections
import subprocess

# --- Global Variables ---
# Global notification label for the main window, initialized later
Notification = None
# Global database connection and cursor (consider a more robust connection management)
connection = None
cursor = None


# --- Main Application Window ---
window = tk.Tk()
window.title("STUDENT ATTENDANCE MANAGEMENT SYSTEM")
window.geometry('1280x720')
window.configure(background='snow')
window.iconbitmap('AMS.ico')


# --- Functions for Manual Attendance ---

def manually_fill():
    """
    Creates a window for manually filling attendance.
    """
    global sb
    sb = tk.Toplevel(window)
    sb.iconbitmap('AMS.ico')
    sb.title("Enter Subject Name")
    sb.geometry('580x320')
    sb.configure(background='snow')

    def fill_attendance_for_subject():
        """
        Validates the subject name and opens the manual attendance filling window.
        """
        subb = SUB_ENTRY.get()
        if not subb:
            messagebox.showwarning("Warning", "Please enter a subject name.")
            return

        sb.destroy()
        create_manual_attendance_window(subb)

    SUB = Label(sb, text="Enter Subject", width=15, height=2, fg="white", bg="blue2", font=('times', 15, 'bold'))
    SUB.place(x=30, y=100)

    global SUB_ENTRY
    SUB_ENTRY = Entry(sb, width=20, bg="yellow", fg="red", font=('times', 23, 'bold'))
    SUB_ENTRY.place(x=250, y=105)

    fill_manual_attendance = Button(sb, text="Fill Attendance", command=fill_attendance_for_subject, fg="white",
                                       bg="deep pink", width=20, height=2, activebackground="Red",
                                       font=('times', 15, 'bold'))
    fill_manual_attendance.place(x=250, y=160)


def create_manual_attendance_window(subject_name):
    """
    Creates the window for manually entering student attendance for a specific subject.
    """
    ts = time.time()
    date_for_db = datetime.datetime.fromtimestamp(ts).strftime('%Y_%m_%d')
    timestamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
    hour, minute, second = timestamp.split(":")
    db_table_name = f"{subject_name}_{date_for_db}_Time_{hour}_{minute}_{second}"

    try:
        global connection, cursor
        connection = pymysql.connect(host='localhost', user='root', password='', db='manually_fill_attendance')
        cursor = connection.cursor()

        sql = f"""
        CREATE TABLE IF NOT EXISTS {db_table_name} (
            ID INT NOT NULL AUTO_INCREMENT,
            ENROLLMENT VARCHAR(100) NOT NULL,
            NAME VARCHAR(50) NOT NULL,
            DATE VARCHAR(20) NOT NULL,
            TIME VARCHAR(20) NOT NULL,
            PRIMARY KEY (ID)
        );
        """
        cursor.execute(sql)
        connection.commit()

    except pymysql.Error as e:
        messagebox.showerror("Database Error", f"Failed to connect or create table: {e}")
        return
    finally:
        if connection:
            connection.close()

    mfw = tk.Toplevel(window)
    mfw.iconbitmap('AMS.ico')
    mfw.title(f"Manual Attendance for {subject_name}")
    mfw.geometry('880x470')
    mfw.configure(background='snow')

    def enter_data_db():
        """
        Enters the student's attendance data into the database.
        """
        enrollment = enr_entry.get()
        student_name = student_entry.get()

        if not enrollment or not student_name:
            messagebox.showwarning("Warning", "Please enter both Enrollment and Student Name.")
            return

        current_ts = time.time()
        current_date_str = datetime.datetime.fromtimestamp(current_ts).strftime('%Y-%m-%d')
        current_time_str = datetime.datetime.fromtimestamp(current_ts).strftime('%H:%M:%S')

        try:
            conn = pymysql.connect(host='localhost', user='root', password='', db='manually_fill_attendance')
            curr = conn.cursor()
            insert_data = f"INSERT INTO {db_table_name} (ENROLLMENT, NAME, DATE, TIME) VALUES (%s, %s, %s, %s)"
            values = (enrollment, student_name, current_date_str, current_time_str)
            curr.execute(insert_data, values)
            conn.commit()
            messagebox.showinfo("Success", "Attendance recorded successfully!")
            enr_entry.delete(0, tk.END)
            student_entry.delete(0, tk.END)
        except pymysql.Error as e:
            messagebox.showerror("Database Error", f"Failed to insert data: {e}")
        finally:
            if conn:
                conn.close()

    def create_csv():
        """
        Creates a CSV file from the attendance data in the database.
        """
        try:
            conn = pymysql.connect(host='localhost', user='root', password='', db='manually_fill_attendance')
            curr = conn.cursor()
            curr.execute(f"SELECT * FROM {db_table_name};")
            
            # Create directories if they don't exist
            attendance_dir = os.path.join(os.getcwd(), "Attendance", "Manually Attendance")
            os.makedirs(attendance_dir, exist_ok=True)
            
            csv_name = os.path.join(attendance_dir, f'{db_table_name}.csv')
            with open(csv_name, "w", newline="") as csv_file:
                csv_writer = csv.writer(csv_file)
                headers = [i[0] for i in curr.description]
                csv_writer.writerow(headers)
                csv_writer.writerows(curr)
            
            messagebox.showinfo("Success", "CSV file created successfully!")
            display_csv(csv_name, f"Attendance of {subject_name}")

        except pymysql.Error as e:
            messagebox.showerror("Database Error", f"Failed to fetch data for CSV: {e}")
        except IOError as e:
            messagebox.showerror("File Error", f"Failed to write CSV file: {e}")
        finally:
            if conn:
                conn.close()

    enr_label = Label(mfw, text="Enter Enrollment", width=15, height=2, fg="white", bg="blue2",
                      font=('times', 15, 'bold'))
    enr_label.place(x=30, y=100)

    stu_name_label = Label(mfw, text="Enter Student Name", width=15, height=2, fg="white", bg="blue2",
                           font=('times', 15, 'bold'))
    stu_name_label.place(x=30, y=200)

    enr_entry = Entry(mfw, width=20, bg="yellow", fg="red", font=('times', 23, 'bold'))
    enr_entry.place(x=290, y=105)

    student_entry = Entry(mfw, width=20, bg="yellow", fg="red", font=('times', 23, 'bold'))
    student_entry.place(x=290, y=205)

    clear_enroll = Button(mfw, text="Clear", command=lambda: enr_entry.delete(0, tk.END), fg="black", bg="deep pink",
                          width=10, height=1, activebackground="Red", font=('times', 15, 'bold'))
    clear_enroll.place(x=690, y=100)

    clear_student = Button(mfw, text="Clear", command=lambda: student_entry.delete(0, tk.END), fg="black", bg="deep pink",
                           width=10, height=1, activebackground="Red", font=('times', 15, 'bold'))
    clear_student.place(x=690, y=200)

    data_sub = Button(mfw, text="Enter Data", command=enter_data_db, fg="black", bg="lime green", width=20,
                      height=2, activebackground="Red", font=('times', 15, 'bold'))
    data_sub.place(x=170, y=300)

    make_csv = Button(mfw, text="Convert to CSV", command=create_csv, fg="black",
                      bg="red", width=20, height=2, activebackground="Red", font=('times', 15, 'bold'))
    make_csv.place(x=570, y=300)

    def open_attendance_folder():
        """
        Opens the folder containing the manually created attendance sheets.
        """
        folder_path = os.path.join(os.getcwd(), "Attendance", "Manually Attendance")
        try:
            subprocess.Popen(f'explorer "{folder_path}"')
        except FileNotFoundError:
            messagebox.showerror("Error", "Could not open the attendance folder. It might not exist.")

    attf_button = Button(mfw, text="Check Sheets", command=open_attendance_folder, fg="black", bg="lawn green", width=12,
                         height=1, activebackground="Red", font=('times', 14, 'bold'))
    attf_button.place(x=730, y=410)


# --- Functions for Face Recognition Based Attendance ---

def subjectchoose():
    """
    Creates a window for choosing a subject to take attendance for.
    """
    windo = tk.Toplevel(window)
    windo.iconbitmap('AMS.ico')
    windo.title("Enter Subject Name")
    windo.geometry('580x320')
    windo.configure(background='snow')

    def fill_attendances():
        """
        Starts the face recognition process to fill attendance.
        """
        sub = tx.get()
        if not sub:
            messagebox.showwarning("Warning", "Please enter a subject name.")
            return
        
        windo.destroy()
        recognize_and_fill_attendance(sub)
        
    sub_label = Label(windo, text="Enter Subject", width=15, height=2, fg="white", bg="blue2", font=('times', 15, 'bold'))
    sub_label.place(x=30, y=100)

    tx = Entry(windo, width=20, bg="yellow", fg="red", font=('times', 23, 'bold'))
    tx.place(x=250, y=105)

    fill_a = Button(windo, text="Fill Attendance", fg="white", command=fill_attendances, bg="deep pink",
                    width=20, height=2, activebackground="Red", font=('times', 15, 'bold'))
    fill_a.place(x=250, y=160)


def recognize_and_fill_attendance(subject):
    """
    Recognizes faces and records attendance for the given subject.
    """
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    try:
        recognizer.read("TrainingImageLabel/Trainner.yml")
    except cv2.error:
        messagebox.showerror("Error", "Model not found. Please train the model first.")
        return

    harcascade_path = "haarcascade_frontalface_default.xml"
    face_cascade = cv2.CascadeClassifier(harcascade_path)

    try:
        df = pd.read_csv("StudentDetails/StudentDetails.csv")
    except FileNotFoundError:
        messagebox.showerror("Error", "StudentDetails.csv not found. Please register students first.")
        return

    cam = cv2.VideoCapture(0)
    font = cv2.FONT_HERSHEY_SIMPLEX
    col_names = ['Enrollment', 'Name', 'Date', 'Time']
    attendance = pd.DataFrame(columns=col_names)
    
    # Set a timer for attendance taking
    timeout = time.time() + 20  # 20 seconds from now

    while time.time() < timeout:
        ret, im = cam.read()
        if not ret:
            print("Failed to grab frame from camera.")
            break
        
        gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.2, 5)

        for (x, y, w, h) in faces:
            enrollment, conf = recognizer.predict(gray[y:y + h, x:x + w])

            if conf < 70:  # Confidence threshold
                student_name = df.loc[df['Enrollment'] == enrollment]['Name'].values
                if len(student_name) > 0:
                    name = student_name[0]
                else:
                    name = "Unknown"
                
                ts_predict = time.time()
                date_predict = datetime.datetime.fromtimestamp(ts_predict).strftime('%Y-%m-%d')
                time_predict = datetime.datetime.fromtimestamp(ts_predict).strftime('%H:%M:%S')
                
                tt = f"{enrollment} - {name}"
                attendance.loc[len(attendance)] = [enrollment, name, date_predict, time_predict]
                cv2.rectangle(im, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(im, tt, (x, y - 10), font, 0.8, (255, 255, 255), 2, cv2.LINE_AA)
            else:
                tt = "Unknown"
                cv2.rectangle(im, (x, y), (x + w, y + h), (0, 0, 255), 2)
                cv2.putText(im, tt, (x, y - 10), font, 0.8, (0, 0, 255), 2, cv2.LINE_AA)

        cv2.imshow('Filling Attendance...', im)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cam.release()
    cv2.destroyAllWindows()

    if not attendance.empty:
        attendance = attendance.drop_duplicates(subset=['Enrollment'], keep='first')
        
        # Save to CSV
        ts_end = time.time()
        date_end = datetime.datetime.fromtimestamp(ts_end).strftime('%Y-%m-%d')
        time_end = datetime.datetime.fromtimestamp(ts_end).strftime('%H_%M_%S')
        
        attendance_dir = os.path.join(os.getcwd(), "Attendance")
        os.makedirs(attendance_dir, exist_ok=True)
        
        file_name = os.path.join(attendance_dir, f"{subject}_{date_end}_{time_end}.csv")
        attendance.to_csv(file_name, index=False)
        
        messagebox.showinfo("Success", "Attendance filled successfully!")
        display_csv(file_name, f"Attendance for {subject}")
    else:
        messagebox.showinfo("Info", "No attendance was recorded.")


# --- Admin Panel ---

def admin_panel():
    """
    Creates the admin login panel.
    """
    win = tk.Toplevel(window)
    win.iconbitmap('AMS.ico')
    win.title("Admin LogIn")
    win.geometry('880x420')
    win.configure(background='snow')

    def log_in():
        """
        Validates the admin credentials and displays the student details.
        """
        username = un_entr.get()
        password = pw_entr.get()

        if username.lower() in ('puneet', 'kshitij') and password in ('Puneet11', 'Kshitij66'):
            win.destroy()
            display_student_details()
        else:
            messagebox.showerror("Error", "Incorrect Username or Password")

    un = Label(win, text="Enter Username", width=15, height=2, fg="white", bg="blue2", font=('times', 15, 'bold'))
    un.place(x=30, y=50)

    pw = Label(win, text="Enter Password", width=15, height=2, fg="white", bg="blue2", font=('times', 15, 'bold'))
    pw.place(x=30, y=150)

    un_entr = Entry(win, width=20, bg="yellow", fg="red", font=('times', 23, 'bold'))
    un_entr.place(x=290, y=55)

    pw_entr = Entry(win, width=20, show="*", bg="yellow", fg="red", font=('times', 23, 'bold'))
    pw_entr.place(x=290, y=155)

    login_button = Button(win, text="LogIn", fg="black", bg="lime green", width=20, height=2,
                          activebackground="Red", command=log_in, font=('times', 15, 'bold'))
    login_button.place(x=290, y=250)


def display_student_details():
    """
    Displays the registered student details from the CSV file.
    """
    student_details_path = 'StudentDetails/StudentDetails.csv'
    try:
        display_csv(student_details_path, "Student Details")
    except FileNotFoundError:
        messagebox.showerror("Error", "StudentDetails.csv not found.")


def display_csv(csv_path, title):
    """
    Displays a CSV file in a new Tkinter window.
    """
    root_csv_display = tk.Toplevel(window)
    root_csv_display.title(title)
    root_csv_display.configure(background='snow')

    try:
        with open(csv_path, newline="") as file:
            reader = csv.reader(file)
            for r, col in enumerate(reader):
                for c, row in enumerate(col):
                    label = Label(root_csv_display, width=13, height=1, fg="black", font=('times', 13, 'bold'),
                                  bg="lawn green", text=row, relief=tk.RIDGE)
                    label.grid(row=r, column=c)
    except FileNotFoundError:
        messagebox.showerror("Error", f"File not found: {csv_path}")
        root_csv_display.destroy()
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while reading the file: {e}")
        root_csv_display.destroy()

# --- Image Capture and Training ---

def take_img():
    """
    Captures and saves training images for a student.
    """
    enrollment = txt.get()
    name = txt2.get()

    if not enrollment or not name:
        messagebox.showwarning("Warning", "Enrollment and Name are required.")
        return

    try:
        cam = cv2.VideoCapture(0)
        detector = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
        sample_num = 0
        
        training_image_dir = "TrainingImage"
        os.makedirs(training_image_dir, exist_ok=True)

        while True:
            ret, img = cam.read()
            if not ret:
                print("Failed to grab frame.")
                break
            
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = detector.detectMultiScale(gray, 1.3, 5)
            
            for (x, y, w, h) in faces:
                cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
                sample_num += 1
                img_path = os.path.join(training_image_dir, f"{name}.{enrollment}.{sample_num}.jpg")
                cv2.imwrite(img_path, gray[y:y + h, x:x + w])
                cv2.imshow('Frame', img)

            if cv2.waitKey(100) & 0xFF == ord('q') or sample_num >= 70:
                break

        cam.release()
        cv2.destroyAllWindows()

        # Save student details to CSV
        student_details_dir = "StudentDetails"
        os.makedirs(student_details_dir, exist_ok=True)
        
        ts = time.time()
        date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
        time_str = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
        row = [enrollment, name, date, time_str]
        
        with open(os.path.join(student_details_dir, 'StudentDetails.csv'), 'a+', newline='') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(row)
            
        messagebox.showinfo("Success", f"Images saved for {name} ({enrollment}).")

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred during image capture: {e}")


def training():
    """
    Trains the face recognizer with the captured images.
    """
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

    try:
        faces, ids = get_images_and_labels("TrainingImage")
        if not faces:
            messagebox.showwarning("Warning", "No images found for training.")
            return

        recognizer.train(faces, np.array(ids))

        training_label_dir = "TrainingImageLabel"
        os.makedirs(training_label_dir, exist_ok=True)
        recognizer.save(os.path.join(training_label_dir, "Trainner.yml"))

        messagebox.showinfo("Success", "Model trained successfully!")

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred during training: {e}")


def get_images_and_labels(path):
    """
    Gets the face images and corresponding labels for training.
    """
    image_paths = [os.path.join(path, f) for f in os.listdir(path) if f.endswith(('.jpg', '.png', '.jpeg'))]
    face_samples = []
    ids = []
    detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

    for image_path in image_paths:
        try:
            pil_image = Image.open(image_path).convert('L')  # Convert to grayscale
            image_np = np.array(pil_image, 'uint8')

            filename_parts = os.path.basename(image_path).split('.')
            if len(filename_parts) > 1 and filename_parts[1].isdigit():
                face_id = int(filename_parts[1])
            else:
                print(f"Warning: Could not extract ID from filename: {image_path}. Skipping.")
                continue

            faces_detected = detector.detectMultiScale(image_np)
            if len(faces_detected) > 0:
                for (x, y, w, h) in faces_detected:
                    face_samples.append(image_np[y:y + h, x:x + w])
                    ids.append(face_id)
            else:
                print(f"No face detected in {image_path}. Skipping this image for training.")
        except Exception as e:
            print(f"Error processing image {image_path}: {e}")
            continue

    return face_samples, ids


# --- Main Window GUI Setup ---

def on_closing():
    """
    Confirmation dialog on closing the main window.
    """
    if messagebox.askokcancel("Quit", "Do you want to quit?"):
        window.destroy()

window.protocol("WM_DELETE_WINDOW", on_closing)
window.grid_rowconfigure(0, weight=1)
window.grid_columnconfigure(0, weight=1)

message = Label(window, text="STUDENT ATTENDANCE MANAGEMENT SYSTEM", bg="cyan",
                fg="black", width=50, height=3, font=('times', 30, 'italic bold'))
message.place(x=80, y=20)

Notification = Label(window, text="All systems go!", bg="Green", fg="white", width=50,
                     height=3, font=('times', 17, 'bold'))
Notification.place(x=350, y=600)

lbl = Label(window, text="Enter Enrollment", width=20, height=2, fg="black", bg="deep pink",
            font=('times', 15, 'bold'))
lbl.place(x=200, y=200)

txt = Entry(window, width=20, bg="yellow", fg="red", font=('times', 25, 'bold'))
txt.place(x=550, y=210)

lbl2 = Label(window, text="Enter Name", width=20, fg="black", bg="deep pink", height=2,
             font=('times', 15, 'bold'))
lbl2.place(x=200, y=300)

txt2 = Entry(window, width=20, bg="yellow", fg="red", font=('times', 25, 'bold'))
txt2.place(x=550, y=310)

clearButton = Button(window, text="Clear", command=lambda: txt.delete(0, tk.END), fg="black", bg="deep pink", width=10,
                     height=1, activebackground="Red", font=('times', 15, 'bold'))
clearButton.place(x=950, y=210)

clearButton1 = Button(window, text="Clear", command=lambda: txt2.delete(0, tk.END), fg="black", bg="deep pink", width=10,
                      height=1, activebackground="Red", font=('times', 15, 'bold'))
clearButton1.place(x=950, y=310)

ap = Button(window, text="Check Registered Students", command=admin_panel, fg="black", bg="cyan",
            width=20, height=2, activebackground="Red", font=('times', 15, 'bold'))
ap.place(x=990, y=410)

takeImg = Button(window, text="Take Images", command=take_img, fg="white", bg="blue2", width=20,
                 height=3, activebackground="Red", font=('times', 15, 'bold'))
takeImg.place(x=90, y=500)

trainImg = Button(window, text="Train Images", command=training, fg="black", bg="lawn green",
                  width=20, height=3, activebackground="Red", font=('times', 15, 'bold'))
trainImg.place(x=390, y=500)

fa = Button(window, text="Automatic Attendance", fg="white", command=subjectchoose, bg="blue2",
            width=20, height=3, activebackground="Red", font=('times', 15, 'bold'))
fa.place(x=690, y=500)

quitWindow = Button(window, text="Manual Attendance", command=manually_fill, fg="black",
                    bg="lawn green", width=20, height=3, activebackground="Red",
                    font=('times', 15, 'bold'))
quitWindow.place(x=990, y=500)

window.mainloop()
